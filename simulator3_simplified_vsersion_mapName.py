from cmath import nan
import numpy as np
from scipy.stats import multivariate_normal



class treasureHuntSimulator:
    def __init__(self, row, col, puzzleNo = 16,treasureNo=3, trasure_low=2, treasure_high=5,maxTimeStemp=-1,verbose=False,mapID=-1):
        self.row = row
        self.col = col
        self.verbose=verbose
        self.treasureNo=treasureNo
        self.trasure_low=trasure_low
        self.puzzleNo = puzzleNo
        self.treasure_high=treasure_high
        self.maxTimeStemp=maxTimeStemp
        self.mapID=mapID
    def reset(self):
        self.done=False
        self.timeList = np.zeros(self.row*self.col,dtype=int)
        self.trajectory=np.zeros(self.row*self.col) ## left : 1, right : 2, up : 3, down : 4, digging : 5
        self.trajectoryL = []
        for _ in range(self.row*self.col):
            self.trajectoryL.append([])
        self.trajectoryR = [] ## left : 1, right : 2, up : 3, down : 4, digging : 5
        if self.mapID == -1:
            a = [np.random.uniform(0,self.col-1) for _ in range(self.treasureNo)]
            b = [np.random.uniform(0,self.row-1) for _ in range(self.treasureNo)]
            radius = [(self.row*self.col)**(1/2)/2-np.random.uniform(0,(self.row*self.col)**(1/2)/2-1) for _ in range(self.treasureNo)]
            self.treasureList = self.makeTreasure(a,b,radius)
            # radius2 = radius.copy()
            # noise_a = np.zeros(self.treasureNo)
            # noise_b = np.zeros(self.treasureNo)
            radius2 = [(self.row*self.col)**(1/2)/2-np.random.uniform(0,(self.row*self.col)**(1/2)/2) for _ in range(self.treasureNo)]
            noise_a = [np.random.uniform(0,(self.row*self.col)**(1/2)/4) for _ in range(self.treasureNo)]
            noise_b = [np.random.uniform(0,(self.row*self.col)**(1/2)/4) for _ in range(self.treasureNo)]
            self.probList = self.makeProbability(a,b,radius2,noise_a, noise_b)
            self.probList = np.array(self.probList)
            self.digTime=np.random.randint(low=self.trasure_low,high=self.treasure_high,size=self.row*self.col)
            self.agentPosition=np.zeros(self.row*self.col)
            self.agentPosition[0]=1
            self.agentPositionId=0
            self.makeGroupSimple(self.puzzleNo)
            self.timeStemp=0
            self.treasureFound=0
            self.groupProbList = self.firstObserveGroup()
            self.history = np.full(self.row*self.col, -1)            
        elif self.mapID==0:
            a = [14.104603989830036]
            b = [4.750345096716571]
            noise_a = [0.6019266406378221]
            noise_b = [0.9261649732842905]
            radius = [3.1135718456335972]
            radius2 = [7.576414600311792]
            self.agentPosition=np.zeros(self.row*self.col)
            self.agentPosition[0]=1
            self.agentPositionId=0

            self.treasureList = [109]
            self.treasureList = np.array(self.treasureList)
            self.probList = np.array([[2.61276445e-09, 5.17401462e-09, 8.97910697e-09, 1.36557871e-08,
        1.82002952e-08, 2.12577955e-08, 2.17588590e-08, 1.95178560e-08,
        1.53428557e-08, 1.05695961e-08, 6.38099913e-09, 3.37595832e-09,
        1.56524948e-09, 6.35986883e-10, 2.26459659e-10, 7.06661840e-11,
        1.70390583e-08, 3.37421680e-08, 5.85569539e-08, 8.90557715e-08,
        1.18692633e-07, 1.38632022e-07, 1.41899691e-07, 1.27285063e-07,
        1.00057934e-07, 6.89292773e-08, 4.16134782e-08, 2.20162024e-08,
        1.02077235e-08, 4.14756776e-09, 1.47684930e-09, 4.60847219e-10,
        9.73798319e-08, 1.92839686e-07, 3.34658537e-07, 5.08962168e-07,
        6.78339637e-07, 7.92295132e-07, 8.10970171e-07, 7.27446188e-07,
        5.71840571e-07, 3.93937348e-07, 2.37824969e-07, 1.25824681e-07,
        5.83381067e-08, 2.37037426e-08, 8.44033360e-09, 2.63378550e-09,
        4.87719985e-07, 9.65823894e-07, 1.67611356e-06, 2.54910094e-06,
        3.39741598e-06, 3.96815400e-06, 4.06168661e-06, 3.64336266e-06,
        2.86402296e-06, 1.97300728e-06, 1.19112950e-06, 6.30183997e-07,
        2.92182272e-07, 1.18718514e-07, 4.22728125e-08, 1.31911280e-08,
        2.14067227e-06, 4.23913821e-06, 7.35670040e-06, 1.11883660e-05,
        1.49117412e-05, 1.74167914e-05, 1.78273193e-05, 1.59912361e-05,
        1.25706035e-05, 8.65980910e-06, 5.22803649e-06, 2.76596705e-06,
        1.28242948e-06, 5.21072416e-07, 1.85541377e-07, 5.78977338e-08,
        8.23394408e-06, 1.63055445e-05, 2.82970264e-05, 4.30352563e-05,
        5.73569550e-05, 6.69924530e-05, 6.85715194e-05, 6.15091556e-05,
        4.83519348e-05, 3.33093416e-05, 2.01092716e-05, 1.06390961e-05,
        4.93277406e-06, 2.00426810e-06, 7.13671748e-07, 2.22699527e-07,
        2.77551605e-05, 5.49630896e-05, 9.53842416e-05, 1.45064192e-04,
        1.93340090e-04, 2.25819640e-04, 2.31142392e-04, 2.07336420e-04,
        1.62985770e-04, 1.12279864e-04, 6.77847769e-05, 3.58625001e-05,
        1.66275037e-05, 6.75603117e-06, 2.40566049e-06, 7.50680485e-07,
        8.19893935e-05, 1.62362252e-04, 2.81767281e-04, 4.28523018e-04,
        5.71131150e-04, 6.67076499e-04, 6.82800032e-04, 6.12476635e-04,
        4.81463776e-04, 3.31677346e-04, 2.00237817e-04, 1.05938664e-04,
        4.91180349e-05, 1.99574741e-05, 7.10637736e-06, 2.21752771e-06,
        2.12250980e-04, 4.20317137e-04, 7.29428270e-04, 1.10934386e-03,
        1.47852229e-03, 1.72690191e-03, 1.76760639e-03, 1.58555589e-03,
        1.24639485e-03, 8.58633521e-04, 5.18367937e-04, 2.74249928e-04,
        1.27154875e-04, 5.16651393e-05, 1.83967156e-05, 5.74065022e-06,
        4.81526101e-04, 9.53558248e-04, 1.65482747e-03, 2.51672819e-03,
        3.35426992e-03, 3.91775975e-03, 4.01010452e-03, 3.59709315e-03,
        2.82765081e-03, 1.94795073e-03, 1.17600254e-03, 6.22180868e-04,
        2.88471653e-04, 1.17210828e-04, 4.17359617e-05, 1.30236050e-05,
        9.57344095e-04, 1.89581282e-03, 3.29003827e-03, 5.00362258e-03,
        6.66877764e-03, 7.78907758e-03, 7.97267245e-03, 7.15154564e-03,
        5.62178208e-03, 3.87281007e-03, 2.33806451e-03, 1.23698628e-03,
        5.73523705e-04, 2.33032215e-04, 8.29771768e-05, 2.58928255e-05,
        1.66799365e-03, 3.30310048e-03, 5.73227846e-03, 8.71787972e-03,
        1.16191020e-02, 1.35710159e-02, 1.38908957e-02, 1.24602353e-02,
        9.79490743e-03, 6.74764969e-03, 4.07364162e-03, 2.15521803e-03,
        9.99258156e-04, 4.06015200e-04, 1.44572264e-04, 4.51134223e-05,
        2.54682334e-03, 5.04343252e-03, 8.75249171e-03, 1.33111415e-02,
        1.77409550e-02, 2.07212899e-02, 2.12097075e-02, 1.90252632e-02,
        1.49556318e-02, 1.03028400e-02, 6.21995508e-03, 3.29075568e-03,
        1.52574562e-03, 6.19935807e-04, 2.20744256e-04, 6.88827065e-05,
        3.40785690e-03, 6.74852317e-03, 1.17115462e-02, 1.78113907e-02,
        2.37388416e-02, 2.77267723e-02, 2.83803148e-02, 2.54573505e-02,
        2.00118525e-02, 1.37860384e-02, 8.32280610e-03, 4.40329892e-03,
        2.04157181e-03, 8.29524563e-04, 2.95373780e-04, 9.21706673e-05,
        3.99615181e-03, 7.91351394e-03, 1.37332987e-02, 2.08861532e-02,
        2.78368540e-02, 3.25132171e-02, 3.32795800e-02, 2.98520273e-02,
        2.34664785e-02, 1.61659084e-02, 9.75956375e-03, 5.16343598e-03,
        2.39400629e-03, 9.72724554e-04, 3.46363859e-04, 1.08081997e-04,
        4.10658396e-03, 8.13220092e-03, 1.41128132e-02, 2.14633341e-02,
        2.86061150e-02, 3.34117077e-02, 3.41992487e-02, 3.06769768e-02,
        2.41149658e-02, 1.66126472e-02, 1.00292656e-02, 5.30612559e-03,
        2.46016376e-03, 9.99605431e-04, 3.55935494e-04, 1.11068802e-04]])
            self.makeGroupSimple(self.puzzleNo)

            self.groupProbList = np.array([[7.04141422e-06, 1.86869146e-05, 8.25605761e-06, 5.78272045e-07,
        1.39860528e-03, 3.71170003e-03, 1.63986457e-03, 1.14859644e-04,
        3.86460503e-02, 1.02561136e-01, 4.53124909e-02, 3.17378439e-03,
        1.63677256e-01, 4.34376221e-01, 1.91911569e-01, 1.34418994e-02]])

            self.digTime = np.array([4, 2, 3, 4, 4, 4, 4, 2, 4, 4, 4, 2, 3, 4, 3, 4, 3, 4, 4, 3, 3, 4,
       2, 4, 3, 2, 2, 4, 3, 3, 2, 3, 2, 4, 3, 2, 4, 3, 3, 3, 3, 3, 4, 2,
       2, 4, 3, 2, 4, 3, 4, 3, 2, 4, 2, 3, 2, 2, 3, 3, 3, 2, 4, 4, 3, 3,
       2, 2, 2, 3, 3, 2, 2, 4, 3, 4, 3, 3, 3, 4, 3, 4, 4, 2, 4, 2, 4, 3,
       3, 4, 4, 3, 3, 3, 3, 4, 3, 3, 4, 2, 4, 4, 2, 2, 2, 2, 4, 4, 4, 2,
       2, 4, 2, 3, 3, 2, 4, 3, 3, 4, 4, 4, 3, 3, 4, 3, 3, 2, 3, 4, 2, 3,
       4, 2, 4, 3, 4, 2, 3, 2, 2, 3, 3, 2, 4, 2, 2, 4, 2, 3, 2, 4, 4, 3,
       3, 2, 4, 3, 2, 3, 2, 2, 2, 3, 3, 2, 3, 4, 4, 3, 3, 4, 2, 3, 2, 2,
       3, 3, 3, 3, 3, 3, 3, 2, 4, 3, 2, 3, 4, 3, 3, 3, 2, 2, 3, 3, 3, 3,
       2, 2, 2, 4, 2, 3, 4, 4, 2, 4, 2, 3, 3, 3, 2, 4, 2, 4, 3, 2, 4, 2,
       3, 4, 3, 2, 4, 4, 4, 2, 4, 3, 2, 4, 2, 2, 3, 3, 3, 2, 4, 4, 3, 3,
       4, 2, 2, 4, 4, 4, 4, 4, 4, 3, 3, 2, 2, 3])

            self.trueProb = np.array([[2.31186995e-17, 9.05357151e-17, 2.57153325e-16, 5.29761046e-16,
       7.91559505e-16, 8.57833074e-16, 6.74275958e-16, 3.84404297e-16,
       1.58947778e-16, 4.76690351e-17, 1.03689297e-17, 1.63586391e-18,
       1.87187171e-19, 1.55353364e-20, 9.35149210e-22, 4.08278803e-23,
       1.82638557e-15, 7.15235406e-15, 2.03152051e-14, 4.18513132e-14,
       6.25334856e-14, 6.77691214e-14, 5.32680432e-14, 3.03680777e-14,
       1.25569317e-14, 3.76587092e-15, 8.19149177e-16, 1.29233837e-16,
       1.47878538e-17, 1.22729716e-18, 7.38771240e-20, 3.22541723e-21,
       1.04649512e-13, 4.09820561e-13, 1.16403476e-12, 2.39802567e-12,
       3.58308719e-12, 3.88308229e-12, 3.05218942e-12, 1.74005125e-12,
       7.19495811e-13, 2.15779493e-13, 4.69361797e-14, 7.40493035e-15,
       8.47324742e-16, 7.03225270e-17, 4.23306287e-18, 1.84812201e-19,
       4.34908220e-12, 1.70315492e-11, 4.83755995e-11, 9.96584750e-11,
       1.48907916e-10, 1.61375278e-10, 1.26844573e-10, 7.23140108e-11,
       2.99012042e-11, 8.96748333e-12, 1.95059967e-12, 3.07738184e-13,
       3.52135895e-14, 2.92250241e-15, 1.75919964e-16, 7.68052751e-18,
       1.31091247e-10, 5.13369700e-10, 1.45815080e-09, 3.00393352e-09,
       4.48842388e-09, 4.86421858e-09, 3.82338446e-09, 2.17970906e-09,
       9.01290427e-10, 2.70300381e-10, 5.87955188e-11, 9.27593008e-12,
       1.06141782e-12, 8.80908817e-14, 5.30262857e-15, 2.31508600e-16,
       2.86592912e-09, 1.12233364e-08, 3.18782292e-08, 6.56722758e-08,
       9.81263431e-08, 1.06342002e-07, 8.35871890e-08, 4.76530035e-08,
       1.97040957e-08, 5.90933223e-09, 1.28539314e-09, 2.02791252e-10,
       2.32048158e-11, 1.92585110e-12, 1.15926562e-13, 5.06126268e-15,
       4.54436143e-08, 1.77962870e-07, 5.05477244e-07, 1.04133265e-06,
       1.55594067e-06, 1.68621230e-06, 1.32540053e-06, 7.55610004e-07,
       3.12438057e-07, 9.37013455e-08, 2.03818404e-08, 3.21556014e-09,
       3.67947237e-10, 3.05372642e-11, 1.83818991e-12, 8.02539280e-14,
       5.22631949e-07, 2.04669200e-06, 5.81332628e-06, 1.19760218e-05,
       1.78943581e-05, 1.93925689e-05, 1.52429923e-05, 8.69002026e-06,
       3.59324656e-06, 1.07762812e-06, 2.34404792e-07, 3.69810916e-08,
       4.23163925e-09, 3.51198956e-10, 2.11404130e-11, 9.22973832e-13,
       4.35948026e-06, 1.70722693e-05, 4.84912590e-05, 9.98967449e-05,
       1.49263934e-04, 1.61761104e-04, 1.27147841e-04, 7.24869038e-05,
       2.99726939e-05, 8.98892336e-06, 1.95526329e-06, 3.08473945e-07,
       3.52977804e-08, 2.92948971e-09, 1.76340565e-10, 7.69889061e-12,
       2.63747983e-05, 1.03287005e-04, 2.93371479e-04, 6.04373993e-04,
       9.03044841e-04, 9.78652554e-04, 7.69242768e-04, 4.38544815e-04,
       1.81334404e-04, 5.43828682e-05, 1.18293172e-05, 1.86626331e-06,
       2.13551107e-07, 1.77233742e-08, 1.06685810e-09, 4.65781869e-11,
       1.15733543e-04, 4.53227011e-04, 1.28732437e-03, 2.65201435e-03,
       3.96259253e-03, 4.29436184e-03, 3.37546433e-03, 1.92435008e-03,
       7.95701745e-04, 2.38633939e-04, 5.19074601e-05, 8.18922906e-06,
       9.37069773e-07, 7.77707898e-08, 4.68141088e-09, 2.04386723e-10,
       3.68336722e-04, 1.44245262e-03, 4.09707357e-03, 8.44037302e-03,
       1.26114548e-02, 1.36673528e-02, 1.07428446e-02, 6.12448892e-03,
       2.53242202e-03, 7.59482867e-04, 1.65202095e-04, 2.60632632e-05,
       2.98234376e-06, 2.47515432e-07, 1.48991856e-08, 6.50486746e-10,
       8.50249648e-04, 3.32968383e-03, 9.45747506e-03, 1.94833253e-02,
       2.91116372e-02, 3.15490181e-02, 2.47982330e-02, 1.41374569e-02,
       5.84571346e-03, 1.75315140e-03, 3.81344066e-04, 6.01631036e-05,
       6.88428977e-06, 5.71351961e-07, 3.43925180e-08, 1.50155033e-09,
       1.42352000e-03, 5.57468214e-03, 1.58340611e-02, 3.26197174e-02,
       4.87397999e-02, 5.28205550e-02, 4.15181361e-02, 2.36694631e-02,
       9.78711374e-03, 2.93519213e-03, 6.38460604e-04, 1.00727335e-04,
       1.15259373e-05, 9.56578982e-07, 5.75812495e-08, 2.51395214e-09,
       1.72860735e-03, 6.76944232e-03, 1.92276009e-02, 3.96107419e-02,
       5.91856640e-02, 6.41410023e-02, 5.04162606e-02, 2.87422782e-02,
       1.18846780e-02, 3.56425951e-03, 7.75294827e-04, 1.22315115e-04,
       1.39961644e-05, 1.16159201e-06, 6.99220040e-08, 3.05273979e-09,
       1.52245620e-03, 5.96212867e-03, 1.69345457e-02, 3.48868236e-02,
       5.21272695e-02, 5.64916415e-02, 4.44036921e-02, 2.53145168e-02,
       1.04673289e-02, 3.13919121e-03, 6.82834317e-04, 1.07727995e-04,
       1.23270026e-05, 1.02306227e-06, 6.15832096e-08, 2.68867458e-09]])

            self.timeStemp=0
            self.treasureFound=0
            self.history = np.full(self.row*self.col, -1)

        elif self.mapID == 1:
            a = [6.163274290171941]
            b = [12.884344434478079]
            noise_a = [2.4178809210033223]
            noise_b = [0.49255005096895044]
            radius = [1.7541061593294556]
            radius2 = [3.9169549255741405]
            self.agentPosition=np.zeros(self.row*self.col)
            self.agentPosition[0]=1
            self.agentPositionId=0

            self.treasureList = [109]
            self.treasureList = np.array(self.treasureList)
            self.probList = np.array([[4.69539373e-16, 1.25720069e-14, 2.60772426e-13, 4.19028139e-12,
        5.21613918e-11, 5.03013471e-10, 3.75780746e-09, 2.17477281e-08,
        9.75029440e-08, 3.38646059e-07, 9.11168683e-07, 1.89922320e-06,
        3.06674518e-06, 3.83622294e-06, 3.71752971e-06, 2.79080518e-06,
        3.69551051e-15, 9.89480036e-14, 2.05240987e-12, 3.29796175e-11,
        4.10536331e-10, 3.95896846e-09, 2.95758306e-08, 1.71165535e-07,
        7.67397102e-07, 2.66531443e-06, 7.17135481e-06, 1.49478397e-05,
        2.41368236e-05, 3.01929998e-05, 2.92588245e-05, 2.19650374e-05,
        2.25320824e-14, 6.03300833e-13, 1.25138511e-11, 2.01081679e-10,
        2.50310164e-09, 2.41384251e-08, 1.80328279e-07, 1.04362196e-06,
        4.67893534e-06, 1.62508222e-05, 4.37248269e-05, 9.11392228e-05,
        1.47165837e-04, 1.84091253e-04, 1.78395446e-04, 1.33924130e-04,
        1.06427211e-13, 2.84960902e-12, 5.91074650e-11, 9.49781823e-10,
        1.18230585e-08, 1.14014551e-07, 8.51755978e-07, 4.92940568e-06,
        2.21003115e-05, 7.67585375e-05, 2.06528243e-04, 4.30483661e-04,
        6.95117715e-04, 8.69529867e-04, 8.42626501e-04, 6.32572323e-04,
        3.89429185e-13, 1.04270412e-11, 2.16280890e-10, 3.47535896e-09,
        4.32619061e-08, 4.17192119e-07, 3.11667132e-06, 1.80372521e-05,
        8.08675357e-05, 2.80868158e-04, 7.55710166e-04, 1.57518833e-03,
        2.54351422e-03, 3.18170799e-03, 3.08326553e-03, 2.31465357e-03,
        1.10389756e-12, 2.95570691e-11, 6.13081801e-10, 9.85144517e-09,
        1.22632598e-07, 1.18259591e-06, 8.83468931e-06, 5.11293948e-05,
        2.29231600e-04, 7.96164451e-04, 2.14217793e-03, 4.46511618e-03,
        7.20998643e-03, 9.01904585e-03, 8.73999541e-03, 6.56124534e-03,
        2.42411664e-12, 6.49061885e-11, 1.34630409e-09, 2.16333952e-08,
        2.69296474e-07, 2.59693520e-06, 1.94006384e-05, 1.12278187e-04,
        5.03383789e-04, 1.74834655e-03, 4.70414046e-03, 9.80522362e-03,
        1.58328533e-02, 1.98054783e-02, 1.91926942e-02, 1.44082428e-02,
        4.12384862e-12, 1.10416839e-10, 2.29029996e-09, 3.68022089e-08,
        4.58120651e-07, 4.41784337e-06, 3.30038970e-05, 1.91004937e-04,
        8.56344332e-04, 2.97424489e-03, 8.00257002e-03, 1.66804094e-02,
        2.69344672e-02, 3.36926008e-02, 3.26501474e-02, 2.45109542e-02,
        5.43471006e-12, 1.45515406e-10, 3.01832521e-09, 4.85006491e-08,
        6.03744982e-07, 5.82215790e-06, 4.34949552e-05, 2.51720311e-04,
        1.12855335e-03, 3.91967798e-03, 1.05463735e-02, 2.19826664e-02,
        3.54962157e-02, 4.44025796e-02, 4.30287581e-02, 3.23023326e-02,
        5.54848616e-12, 1.48561782e-10, 3.08151410e-09, 4.95160142e-08,
        6.16384433e-07, 5.94404526e-06, 4.44055257e-05, 2.56990096e-04,
        1.15217970e-03, 4.00173676e-03, 1.07671627e-02, 2.24428754e-02,
        3.62393318e-02, 4.53321512e-02, 4.39295687e-02, 3.29785846e-02,
        4.38830796e-12, 1.17497788e-10, 2.43717519e-09, 3.91623072e-08,
        4.87499587e-07, 4.70115638e-06, 3.51204123e-05, 2.03253942e-04,
        9.11261056e-04, 3.16498100e-03, 8.51576888e-03, 1.77501116e-02,
        2.86617545e-02, 3.58532822e-02, 3.47439770e-02, 2.60828235e-02,
        2.68871116e-12, 7.19907578e-11, 1.49325440e-09, 2.39946999e-08,
        2.98690428e-07, 2.88039303e-06, 2.15182356e-05, 1.24533453e-04,
        5.58328585e-04, 1.93918016e-03, 5.21760165e-03, 1.08754727e-02,
        1.75610236e-02, 2.19672642e-02, 2.12875942e-02, 1.59809155e-02,
        1.27619097e-12, 3.41702582e-11, 7.08769986e-10, 1.13890327e-08,
        1.41772769e-07, 1.36717235e-06, 1.02135842e-05, 5.91095354e-05,
        2.65009461e-04, 9.20427691e-04, 2.47652339e-03, 5.16201969e-03,
        8.33530203e-03, 1.04267147e-02, 1.01041108e-02, 7.58530714e-03,
        4.69257956e-13, 1.25644719e-11, 2.60616133e-10, 4.18776995e-09,
        5.21301290e-08, 5.02711992e-07, 3.75555523e-06, 2.17346937e-05,
        9.74445059e-05, 3.38443092e-04, 9.10622576e-04, 1.89808490e-03,
        3.06490713e-03, 3.83392371e-03, 3.71530162e-03, 2.78913252e-03,
        1.33669427e-13, 3.57902457e-12, 7.42372264e-11, 1.19289786e-09,
        1.48494114e-08, 1.43198901e-07, 1.06978030e-06, 6.19118762e-06,
        2.77573371e-05, 9.64064510e-05, 2.59393360e-04, 5.40674735e-04,
        8.73047274e-04, 1.09210377e-03, 1.05831394e-03, 7.94492114e-04,
        2.94969417e-14, 7.89786279e-13, 1.63819894e-11, 2.63237745e-10,
        3.27683176e-09, 3.15998186e-08, 2.36069292e-07, 1.36621443e-06,
        6.12523426e-06, 2.12740904e-05, 5.72405448e-05, 1.19311136e-04,
        1.92656056e-04, 2.40995433e-04, 2.33539003e-04, 1.75321224e-04]])
            self.makeGroupSimple(self.puzzleNo)

            self.groupProbList = np.array([[1.26566545e-09, 7.38876262e-06, 9.20463007e-04, 3.80238806e-03,
        7.64517234e-08, 4.46313546e-04, 5.55999874e-02, 2.29680853e-01,
        1.71705565e-07, 1.00239100e-03, 1.24873931e-01, 5.15848157e-01,
        1.81459557e-08, 1.05933332e-04, 1.31967582e-02, 5.45151684e-02]])

            self.digTime = np.array([4, 3, 2, 4, 3, 2, 2, 4, 2, 2, 2, 2, 4, 3, 4, 3, 2, 3, 3, 3, 2, 4,
       2, 3, 3, 3, 3, 4, 3, 3, 2, 2, 4, 3, 2, 4, 2, 3, 3, 2, 3, 2, 2, 2,
       2, 4, 2, 2, 3, 3, 2, 2, 2, 3, 2, 4, 3, 3, 4, 2, 4, 3, 2, 4, 2, 2,
       2, 2, 2, 3, 2, 3, 4, 3, 2, 4, 4, 3, 2, 2, 4, 2, 4, 3, 3, 3, 4, 3,
       3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 4, 4, 3, 3, 2, 4, 2, 2, 4, 3, 3,
       2, 4, 4, 4, 2, 3, 4, 4, 4, 2, 2, 2, 4, 3, 3, 4, 3, 3, 2, 4, 3, 3,
       4, 2, 3, 4, 3, 4, 3, 2, 2, 3, 2, 4, 4, 4, 3, 4, 2, 4, 3, 3, 3, 4,
       2, 2, 4, 4, 4, 2, 4, 3, 4, 2, 3, 3, 4, 2, 2, 2, 2, 3, 3, 4, 3, 2,
       4, 4, 4, 3, 4, 3, 2, 3, 4, 3, 3, 2, 2, 2, 2, 4, 4, 3, 3, 2, 3, 3,
       3, 2, 4, 4, 2, 2, 2, 4, 3, 3, 3, 4, 4, 3, 2, 2, 3, 2, 4, 2, 4, 3,
       3, 4, 3, 2, 4, 2, 2, 3, 2, 3, 4, 2, 2, 4, 2, 3, 4, 3, 4, 4, 3, 4,
       2, 2, 4, 2, 4, 2, 4, 2, 3, 4, 4, 3, 2, 2])

            self.trueProb = np.array([[5.17916493e-27, 6.03207405e-24, 3.97270435e-21, 1.47951197e-18,
       3.11575558e-16, 3.71040175e-14, 2.49856785e-12, 9.51423815e-11,
       2.04865839e-09, 2.49446682e-08, 1.71750724e-07, 6.68701161e-07,
       1.47223872e-06, 1.83289275e-06, 1.29035298e-06, 5.13680004e-07,
       1.30741894e-25, 1.52272576e-22, 1.00286223e-19, 3.73485301e-17,
       7.86535648e-15, 9.36647041e-13, 6.30733906e-11, 2.40175690e-09,
       5.17159582e-08, 6.29698649e-07, 4.33564390e-06, 1.68805700e-05,
       3.71649254e-05, 4.62692098e-05, 3.25734349e-05, 1.29672442e-05,
       1.86630431e-24, 2.17364883e-21, 1.43155805e-18, 5.33139919e-16,
       1.12275784e-13, 1.33703770e-11, 9.00355175e-10, 3.42844144e-08,
       7.38230974e-07, 8.98877374e-06, 6.18901154e-05, 2.40965459e-04,
       5.30519013e-04, 6.60480150e-04, 4.64976758e-04, 1.85103818e-04,
       1.50647803e-23, 1.75456607e-20, 1.15555151e-17, 4.30349742e-15,
       9.06288446e-13, 1.07925482e-10, 7.26765345e-09, 2.76743278e-07,
       5.95898934e-06, 7.25572467e-05, 4.99576082e-04, 1.94506957e-03,
       4.28234151e-03, 5.33138585e-03, 3.75328541e-03, 1.49415524e-03,
       6.87631568e-23, 8.00871298e-20, 5.27451232e-17, 1.96433045e-14,
       4.13675163e-12, 4.92625627e-10, 3.31731883e-08, 1.26319409e-06,
       2.71997938e-05, 3.31187393e-04, 2.28031393e-03, 8.87826578e-03,
       1.95467384e-02, 2.43350991e-02, 1.71318630e-02, 6.82006833e-03,
       1.77484923e-22, 2.06713286e-19, 1.36140698e-16, 5.07014302e-14,
       1.06773900e-11, 1.27151844e-09, 8.56234798e-08, 3.26043648e-06,
       7.02055219e-05, 8.54829415e-04, 5.88572954e-03, 2.29157356e-02,
       5.04521830e-02, 6.28114442e-02, 4.42191361e-02, 1.76033120e-02,
       2.59047727e-22, 3.01707919e-19, 1.98703854e-16, 7.40011603e-14,
       1.55841610e-11, 1.85584192e-09, 1.24971560e-07, 4.75876285e-06,
       1.02468314e-04, 1.24766438e-03, 8.59050352e-03, 3.34466112e-02,
       7.36373720e-02, 9.16763044e-02, 6.45399423e-02, 2.56928751e-02,
       2.13801507e-22, 2.49010515e-19, 1.63997515e-16, 6.10758480e-14,
       1.28621746e-11, 1.53169381e-09, 1.03143572e-07, 3.92758000e-06,
       8.45708250e-05, 1.02974277e-03, 7.09005488e-03, 2.76047042e-02,
       6.07756003e-02, 7.56637870e-02, 5.32671608e-02, 2.12052639e-02,
       9.97825037e-23, 1.16214768e-19, 7.65386682e-17, 2.85044811e-14,
       6.00285754e-12, 7.14851102e-10, 4.81377518e-08, 1.83302620e-06,
       3.94697342e-05, 4.80587408e-04, 3.30897306e-03, 1.28832885e-02,
       2.83643536e-02, 3.53127637e-02, 2.48601179e-02, 9.89662959e-03,
       2.63336275e-23, 3.06702709e-20, 2.01993406e-17, 7.52262533e-15,
       1.58421576e-12, 1.88656548e-10, 1.27040471e-08, 4.83754442e-07,
       1.04164682e-05, 1.26831953e-04, 8.73271975e-04, 3.40003216e-03,
       7.48564425e-03, 9.31940103e-03, 6.56084043e-03, 2.61182219e-03,
       3.92988316e-24, 4.57705954e-21, 3.01443652e-18, 1.12263449e-15,
       2.36419491e-13, 2.81540471e-11, 1.89588087e-09, 7.21928049e-08,
       1.55449541e-06, 1.89276907e-05, 1.30322221e-04, 5.07401766e-04,
       1.11711564e-03, 1.39077524e-03, 9.79103099e-04, 3.89773724e-04,
       3.31635678e-25, 3.86249713e-22, 2.54382804e-19, 9.47370789e-17,
       1.99510100e-14, 2.37586873e-12, 1.59989932e-10, 6.09221923e-09,
       1.31181034e-07, 1.59727332e-06, 1.09976547e-05, 4.28187103e-05,
       9.42713532e-05, 1.17364988e-04, 8.26247261e-05, 3.28922942e-05,
       1.58254297e-26, 1.84315745e-23, 1.21389750e-20, 4.52078918e-18,
       9.52048673e-16, 1.13374845e-13, 7.63461109e-12, 2.90716572e-10,
       6.25987004e-09, 7.62208000e-08, 5.24800628e-07, 2.04327983e-06,
       4.49856507e-06, 5.60057766e-06, 3.94279592e-06, 1.56959798e-06,
       4.27033981e-28, 4.97358287e-25, 3.27558550e-22, 1.21989142e-19,
       2.56901166e-17, 3.05931101e-15, 2.06012628e-13, 7.84470673e-12,
       1.68916565e-10, 2.05674488e-09, 1.41612396e-08, 5.51359384e-08,
       1.21389446e-07, 1.51126195e-07, 1.06392551e-07, 4.23540899e-08,
       6.51601411e-30, 7.58907666e-27, 4.99814120e-24, 1.86140450e-21,
       3.91999629e-19, 4.66813289e-17, 3.14349970e-15, 1.19700591e-13,
       2.57745933e-12, 3.13834011e-11, 2.16083124e-10, 8.41306709e-10,
       1.85225387e-09, 2.30600013e-09, 1.62341967e-09, 6.46271398e-10,
       5.62230311e-32, 6.54818859e-29, 4.31261570e-26, 1.60610154e-23,
       3.38234493e-21, 4.02787004e-19, 2.71234958e-17, 1.03282926e-15,
       2.22394509e-14, 2.70789765e-13, 1.86446008e-12, 7.25916371e-12,
       1.59820598e-11, 1.98971818e-11, 1.40075778e-11, 5.57631341e-12]])

            self.timeStemp=0
            self.treasureFound=0
            self.history = np.full(self.row*self.col, -1)
        
        elif self.mapID == 2:
            a = [6.890256683016191]
            b = [3.1158351975292082]
            noise_a = [1.5809936914270302]
            noise_b = [3.8331694091218655]
            radius = [3.140355413916457]
            radius2 = [7.474576789414952]
            self.agentPosition=np.zeros(self.row*self.col)
            self.agentPosition[0]=1
            self.agentPositionId=0

            self.treasureList = [191]
            self.treasureList = np.array(self.treasureList)
            self.probList = np.array([[6.99219966e-06, 1.65698890e-05, 3.43496639e-05, 6.22905978e-05,
        9.88142594e-05, 1.37124120e-04, 1.66458204e-04, 1.76763938e-04,
        1.64202303e-04, 1.33432596e-04, 9.48509626e-05, 5.89818870e-05,
        3.20843095e-05, 1.52673565e-05, 6.35524222e-06, 2.31418186e-06,
        2.03126447e-05, 4.81362496e-05, 9.97872703e-05, 1.80956901e-04,
        2.87059729e-04, 3.98351545e-04, 4.83568335e-04, 5.13506941e-04,
        4.77014846e-04, 3.87627506e-04, 2.75546179e-04, 1.71344952e-04,
        9.32063170e-05, 4.43523357e-05, 1.84622556e-05, 6.72279913e-06,
        5.16197904e-05, 1.22326913e-04, 2.53585786e-04, 4.59859237e-04,
        7.29494522e-04, 1.01231639e-03, 1.22887475e-03, 1.30495664e-03,
        1.21222060e-03, 9.85063783e-04, 7.00235554e-04, 4.35432738e-04,
        2.36861847e-04, 1.12710989e-04, 4.69174633e-05, 1.70844066e-05,
        1.14752753e-04, 2.71937370e-04, 5.63730829e-04, 1.02228454e-03,
        1.62169402e-03, 2.25041777e-03, 2.73183521e-03, 2.90096816e-03,
        2.69481241e-03, 2.18983418e-03, 1.55665022e-03, 9.67983505e-04,
        5.26552878e-04, 2.50560807e-04, 1.04299302e-04, 3.79792845e-05,
        2.23155250e-04, 5.28826106e-04, 1.09626558e-03, 1.98799728e-03,
        3.15364575e-03, 4.37630057e-03, 5.31249447e-03, 5.64140079e-03,
        5.24049767e-03, 4.25848600e-03, 3.02715759e-03, 1.88240015e-03,
        1.02396706e-03, 4.87255929e-04, 2.02826826e-04, 7.38568484e-05,
        3.79619240e-04, 8.99609419e-04, 1.86490574e-03, 3.38186988e-03,
        5.36480591e-03, 7.44471796e-03, 9.03731871e-03, 9.59683575e-03,
        8.91484177e-03, 7.24429840e-03, 5.14963131e-03, 3.20223395e-03,
        1.74191553e-03, 8.28892556e-04, 3.45037662e-04, 1.25641143e-04,
        5.64919332e-04, 1.33872759e-03, 2.77520525e-03, 5.03263130e-03,
        7.98347989e-03, 1.10786405e-02, 1.34486230e-02, 1.42812520e-02,
        1.32663625e-02, 1.07803920e-02, 7.66327408e-03, 4.76531132e-03,
        2.59218094e-03, 1.23349235e-03, 5.13457762e-04, 1.86969213e-04,
        7.35396862e-04, 1.74271974e-03, 3.61268789e-03, 6.55134469e-03,
        1.03926804e-02, 1.44218776e-02, 1.75070574e-02, 1.85909515e-02,
        1.72697956e-02, 1.40336257e-02, 9.97584503e-03, 6.20335469e-03,
        3.37443174e-03, 1.60572732e-03, 6.68405568e-04, 2.43391516e-04,
        8.37441004e-04, 1.98454066e-03, 4.11398679e-03, 7.46041351e-03,
        1.18347754e-02, 1.64230667e-02, 1.99363480e-02, 2.11706440e-02,
        1.96661635e-02, 1.59809406e-02, 1.13600997e-02, 7.06413619e-03,
        3.84267007e-03, 1.82853908e-03, 7.61153955e-04, 2.77164680e-04,
        8.34226124e-04, 1.97692213e-03, 4.09819347e-03, 7.43177347e-03,
        1.17893425e-02, 1.63600196e-02, 1.98598136e-02, 2.10893712e-02,
        1.95906664e-02, 1.59195908e-02, 1.13164890e-02, 7.03701744e-03,
        3.82791831e-03, 1.82151944e-03, 7.58231936e-04, 2.76100663e-04,
        7.26959914e-04, 1.72272613e-03, 3.57124080e-03, 6.47618343e-03,
        1.02734488e-02, 1.42564205e-02, 1.73062051e-02, 1.83776641e-02,
        1.70716653e-02, 1.38726228e-02, 9.86139569e-03, 6.13218580e-03,
        3.33571808e-03, 1.58730538e-03, 6.60737187e-04, 2.40599171e-04,
        5.54158827e-04, 1.31322770e-03, 2.72234352e-03, 4.93677045e-03,
        7.83141168e-03, 1.08676161e-02, 1.31924555e-02, 1.40092247e-02,
        1.30136667e-02, 1.05750486e-02, 7.51730510e-03, 4.67454233e-03,
        2.54280544e-03, 1.20999696e-03, 5.03677490e-04, 1.83407850e-04,
        3.69534646e-04, 8.75711273e-04, 1.81536448e-03, 3.29203042e-03,
        5.22228971e-03, 7.24694885e-03, 8.79724212e-03, 9.34189557e-03,
        8.67801879e-03, 7.05185344e-03, 5.01283123e-03, 3.11716652e-03,
        1.69564150e-03, 8.06873006e-04, 3.35871728e-04, 1.22303483e-04,
        2.15562485e-04, 5.10833018e-04, 1.05896560e-03, 1.92035650e-03,
        3.04634427e-03, 4.22739876e-03, 5.13173906e-03, 5.44945447e-03,
        5.06219192e-03, 4.11359279e-03, 2.92415981e-03, 1.81835227e-03,
        9.89127003e-04, 4.70677249e-04, 1.95925728e-04, 7.13438999e-05,
        1.09998894e-04, 2.60671827e-04, 5.40377164e-04, 9.79934380e-04,
        1.55451213e-03, 2.15718976e-03, 2.61866353e-03, 2.78078981e-03,
        2.58317448e-03, 2.09911597e-03, 1.49216290e-03, 9.27882873e-04,
        5.04739383e-04, 2.40180830e-04, 9.99784970e-05, 3.64059175e-05,
        4.91021564e-05, 1.16360705e-04, 2.41217736e-04, 4.37430684e-04,
        6.93915142e-04, 9.62943042e-04, 1.16893927e-03, 1.24131045e-03,
        1.15309739e-03, 9.37019613e-04, 6.66083211e-04, 4.14195530e-04,
        2.25309468e-04, 1.07213776e-04, 4.46291744e-05, 1.62511549e-05]])
            self.makeGroupSimple(self.puzzleNo)

            self.groupProbList = np.array([[0.00332949, 0.0160422 , 0.01250523, 0.00155173, 0.03271588,
        0.15763208, 0.12287751, 0.01524745, 0.05076111, 0.24457783,
        0.19065354, 0.02365755, 0.01279345, 0.06164158, 0.0480509 ,
        0.00596247]])

            self.digTime = np.array([3, 3, 4, 4, 4, 2, 2, 4, 3, 2, 2, 3, 2, 3, 2, 3, 2, 4, 2, 3, 2, 2,
       3, 2, 4, 4, 2, 2, 2, 3, 3, 2, 4, 4, 2, 4, 4, 2, 4, 3, 3, 3, 2, 4,
       3, 4, 3, 3, 4, 4, 2, 2, 3, 2, 2, 2, 2, 4, 4, 4, 3, 4, 4, 3, 2, 3,
       2, 3, 2, 3, 2, 4, 2, 4, 2, 2, 4, 4, 2, 4, 2, 3, 2, 3, 3, 4, 4, 3,
       4, 4, 2, 2, 4, 2, 2, 2, 4, 2, 4, 2, 4, 2, 3, 3, 4, 2, 2, 3, 4, 4,
       2, 4, 4, 2, 4, 4, 3, 4, 2, 2, 3, 4, 3, 4, 3, 3, 3, 4, 4, 3, 4, 4,
       2, 3, 2, 4, 2, 3, 4, 3, 4, 4, 4, 2, 3, 4, 4, 2, 4, 2, 3, 3, 2, 4,
       3, 3, 4, 3, 3, 3, 3, 4, 2, 2, 4, 2, 3, 4, 3, 4, 3, 2, 4, 4, 2, 3,
       2, 2, 2, 2, 3, 4, 4, 2, 2, 2, 4, 3, 3, 3, 2, 3, 2, 4, 4, 2, 2, 3,
       4, 3, 2, 4, 3, 3, 2, 4, 2, 3, 4, 4, 3, 2, 4, 3, 2, 4, 2, 2, 4, 3,
       3, 2, 4, 3, 4, 4, 3, 3, 3, 4, 3, 3, 2, 2, 2, 4, 4, 3, 2, 4, 2, 3,
       4, 4, 2, 4, 4, 2, 4, 3, 3, 4, 2, 4, 2, 4])

            self.trueProb = np.array([[5.74373337e-06, 1.32114472e-05, 2.21009948e-05, 2.68892420e-05,
       2.37930768e-05, 1.53118605e-05, 7.16655814e-06, 2.43948753e-06,
       6.03937345e-07, 1.08740288e-07, 1.42394881e-08, 1.35613707e-09,
       9.39329813e-11, 4.73192588e-12, 1.73365657e-13, 4.61948451e-15,
       4.39473655e-05, 1.01085524e-04, 1.69102643e-04, 2.05739241e-04,
       1.82049370e-04, 1.17156540e-04, 5.48339084e-05, 1.86653946e-05,
       4.62094138e-06, 8.32010968e-07, 1.08951434e-07, 1.03762914e-08,
       7.18714953e-10, 3.62056632e-11, 1.32648286e-12, 3.53453339e-14,
       2.44555102e-04, 5.62513369e-04, 9.41010086e-04, 1.14488276e-03,
       1.01305509e-03, 6.51944192e-04, 3.05135745e-04, 1.03867830e-04,
       2.57142785e-05, 4.62991411e-06, 6.06285016e-07, 5.77412318e-08,
       3.99945268e-09, 2.01474641e-10, 7.38151535e-12, 1.96687143e-13,
       9.89750934e-04, 2.27657541e-03, 3.80840801e-03, 4.63351111e-03,
       4.09998489e-03, 2.63851527e-03, 1.23492982e-03, 4.20368584e-04,
       1.04069516e-04, 1.87379522e-05, 2.45372579e-06, 2.33687368e-07,
       1.61863809e-08, 8.15397888e-10, 2.98740923e-11, 7.96022171e-13,
       2.91326788e-03, 6.70095253e-03, 1.12098028e-02, 1.36384404e-02,
       1.20680404e-02, 7.76629911e-03, 3.63493608e-03, 1.23732775e-03,
       3.06321891e-04, 5.51539507e-05, 7.22238321e-06, 6.87843658e-07,
       4.76435655e-08, 2.40007097e-09, 8.79324593e-11, 2.34303979e-12,
       6.23649000e-03, 1.43448612e-02, 2.39970458e-02, 2.91960783e-02,
       2.58342921e-02, 1.66254697e-02, 7.78137934e-03, 2.64877191e-03,
       6.55749313e-04, 1.18069150e-04, 1.54610981e-05, 1.47248048e-06,
       1.01991520e-07, 5.13787924e-09, 1.88238749e-10, 5.01579149e-12,
       9.70968965e-03, 2.23337407e-02, 3.73613791e-02, 4.54558347e-02,
       4.02218169e-02, 2.58844559e-02, 1.21149522e-02, 4.12391476e-03,
       1.02094645e-03, 1.83823722e-04, 2.40716276e-05, 2.29252809e-06,
       1.58792207e-07, 7.99924523e-09, 2.93071878e-10, 7.80916489e-12,
       1.09945074e-02, 2.52890140e-02, 4.23051585e-02, 5.14706988e-02,
       4.55440987e-02, 2.93095715e-02, 1.37180422e-02, 4.66960459e-03,
       1.15604141e-03, 2.08147875e-04, 2.72568637e-05, 2.59588287e-06,
       1.79804109e-07, 9.05773142e-09, 3.31852104e-10, 8.84249902e-12,
       9.05422980e-03, 2.08260848e-02, 3.48392713e-02, 4.23873047e-02,
       3.75066131e-02, 2.41371064e-02, 1.12971233e-02, 3.84552681e-03,
       9.52026696e-04, 1.71414564e-04, 2.24466544e-05, 2.13776927e-06,
       1.48072820e-07, 7.45925021e-09, 2.73287842e-10, 7.28200138e-12,
       5.42291201e-03, 1.24735100e-02, 2.08665239e-02, 2.53873194e-02,
       2.24640933e-02, 1.44566028e-02, 6.76626363e-03, 2.30322778e-03,
       5.70203885e-04, 1.02666502e-04, 1.34441288e-05, 1.28038882e-06,
       8.86862707e-08, 4.46761994e-09, 1.63682163e-10, 4.36145908e-12,
       2.36221222e-03, 5.43344197e-03, 9.08942608e-03, 1.10586777e-02,
       9.78532485e-03, 6.29727420e-03, 2.94737414e-03, 1.00328251e-03,
       2.48379945e-04, 4.47213719e-05, 5.85624205e-06, 5.57735423e-07,
       3.86316046e-08, 1.94608845e-09, 7.12997013e-11, 1.89984494e-12,
       7.48360015e-04, 1.72134014e-03, 2.87957322e-03, 3.50344145e-03,
       3.10003724e-03, 1.99500628e-03, 9.33742083e-04, 3.17844650e-04,
       7.86879424e-05, 1.41679424e-05, 1.85528521e-06, 1.76693223e-07,
       1.22386752e-08, 6.16530033e-10, 2.25880829e-11, 6.01879871e-13,
       1.72427903e-04, 3.96610007e-04, 6.63475816e-04, 8.07219855e-04,
       7.14272423e-04, 4.59664791e-04, 2.15141357e-04, 7.32338520e-05,
       1.81303071e-05, 3.26440289e-06, 4.27471981e-07, 4.07114774e-08,
       2.81988490e-09, 1.42053261e-10, 5.20446804e-12, 1.38677751e-13,
       2.88941437e-05, 6.64608587e-05, 1.11180181e-04, 1.35267703e-04,
       1.19692287e-04, 7.70270951e-05, 3.60517362e-05, 1.22719664e-05,
       3.03813762e-06, 5.47023563e-07, 7.16324713e-08, 6.82211670e-09,
       4.72534653e-10, 2.38041945e-11, 8.72124780e-13, 2.32385524e-14,
       3.52141669e-06, 8.09978588e-06, 1.35498650e-05, 1.64854842e-05,
       1.45872610e-05, 9.38752507e-06, 4.39373414e-06, 1.49562167e-06,
       3.70267021e-07, 6.66674162e-08, 8.73006595e-09, 8.31431997e-10,
       5.75892274e-11, 2.90108918e-12, 1.06288485e-13, 2.83215268e-15,
       3.12126266e-07, 7.17937167e-07, 1.20101344e-06, 1.46121663e-06,
       1.29296465e-06, 8.32077940e-07, 3.89445485e-07, 1.32566762e-07,
       3.28191955e-08, 5.90917052e-09, 7.73803025e-10, 7.36952731e-11,
       5.10451108e-12, 2.57142569e-13, 9.42104580e-15, 2.51032274e-16]])

            self.timeStemp=0
            self.treasureFound=0
            self.history = np.full(self.row*self.col, -1)
        
        else:
            self.treasureList = []
            self.treasureList = np.array(self.treasureList)
            self.probList = []
            self.probList = np.array(self.probList)
            self.makeGroupSimple(self.puzzleNo)

            self.groupProbList = []
            self.groupProbList = np.array(self.groupProbList)

            self.digTime = np.array([])

            self.timeStemp=0
            self.treasureFound=0
            self.history = np.full(self.row*self.col, -1)
        self.distribution_info = [a,b,radius,noise_a,noise_b,radius2,self.trueProb]

    def makeGroupSimple(self, puzzleNo):
        size = int(self.row * self.col / puzzleNo)
        sideLength = int(size**(1/2))
        groupMap = np.zeros((self.row, self.col,2),dtype=int)
        groupInfo=np.zeros(((self.row*self.col)//size,4),dtype=int)
        for row in range(self.row):
            for col in range(self.col):
                groupMap[row][col] = (row//sideLength)*(self.col//sideLength)+col//sideLength+1
        for i in range(len(groupInfo)):
            groupInfo[i][0] = int(sideLength*(i%self.col))
            groupInfo[i][1] = int(sideLength*(i//self.col))
            groupInfo[i][2] = int(sideLength*(i%self.col+1))
            groupInfo[i][3] = int(sideLength*(i//self.col+1))
        self.groupMap = groupMap
        self.groupInfo = groupInfo
        self.sideLength = sideLength

    def makeGroup(self,puzzleNo):
        groupID=0
        groupInfo=np.zeros((puzzleNo,4),dtype=int) ## show each edge
        groupInfo[0] = [0,0,self.row,self.col]
        groupMap=np.zeros((self.row,self.col,2),dtype=int)
        for i in range(puzzleNo-1):
            cutRange=0
            while cutRange <= 1:
                x = np.random.randint(groupID+1) ## choose puzzle Id to divie
                y = np.random.randint(2) ## choose row or colunm to divide (0 = row cut, 1 = column cut)
                if y==0:
                    upLine = groupInfo[x][2]
                    downLine = groupInfo[x][0]
                else:
                    upLine = groupInfo[x][3]
                    downLine = groupInfo[x][1]
                cutRange=upLine-downLine
            cutLine = np.random.randint(1,cutRange)
            if y==0:
                groupInfo[x][2] = cutLine+downLine
                groupInfo[groupID+1][0] = cutLine+downLine
                groupInfo[groupID+1][2] = upLine
                groupInfo[groupID+1][1] = groupInfo[x][1]
                groupInfo[groupID+1][3] = groupInfo[x][3]
            else:
                groupInfo[x][3] = cutLine+downLine
                groupInfo[groupID+1][1] = cutLine+downLine
                groupInfo[groupID+1][3] = upLine
                groupInfo[groupID+1][0] = groupInfo[x][0]
                groupInfo[groupID+1][2] = groupInfo[x][2]
            groupID+=1
        tempID=0
        for i in groupInfo:
            for row in range(i[0],i[2]):
                for col in range(i[1],i[3]):
                    groupMap[row][col]=np.array([tempID,0])
            tempID+=1
        self.groupMap = groupMap
        self.groupInfo = groupInfo

            
    def makeTreasure(self,a,b,radius):
        treasureList = []
        trueProbList = []
        for i in range(self.treasureNo):
            distribution = multivariate_normal(mean=[a[i],b[i]],cov=[[radius[i],0],[0,radius[i]]]) ## first axis mean = a[i], second axis mean = b[i]
            x,y=np.mgrid[0:self.row:1, 0:self.col:1]
            pos = np.dstack((x,y))
            probability = distribution.pdf(pos)
            totalSum=np.sum(probability)
            for i in range(len(probability)):
                for j in range(len(probability[i])):
                    probability[i][j] = probability[i][j]/totalSum
            treasureId=0
            treasureProb=np.random.rand(1)
            treasureSum=0
            for i in probability:
                for j in i:
                    treasureSum+=j
                    if treasureProb<treasureSum:
                        break
                    else:
                        treasureId+=1
            treasureList.append(treasureId)
            trueProbList.append(np.reshape(probability,(self.row*self.col)))
        self.trueProb = trueProbList.copy()
        return np.array(treasureList)

    def makeProbability(self,a,b,radius,noise_a, noise_b):
        finalProbList=[]
        for i in range(self.treasureNo): 
            an = noise_a[i]
            bn = noise_b[i]
            newA = min(a[i]+an,self.col-1)
            newB = min(b[i]+bn,self.row-1)
                
            distribution = multivariate_normal(mean=[newA,newB],cov=[[radius[i],0],[0,radius[i]]])
            x,y=np.mgrid[0:self.row:1, 0:self.col:1]
            pos = np.dstack((x,y))
            probability = distribution.pdf(pos)
            totalSum=np.sum(probability)
            if totalSum == 0:
                print(probability)
                print("a is",a[i]+an)
                print("b is",b[i]+bn)
                print("radius is ",radius[i])
            for i in range(len(probability)):
                for j in range(len(probability[i])):
                    probability[i][j] = probability[i][j]/totalSum
            finalProb = np.reshape(probability,(self.row*self.col))
            finalProbList.append(finalProb)
        return finalProbList
        

    def moveAgent(self,action):
        reward = 0
        if action=="R": 
            self.trajectory[self.agentPositionId]=2
            self.trajectoryL[self.agentPositionId].append([2,self.timeStemp])
            self.timeList[self.agentPositionId]=self.timeStemp
            self.trajectoryR.append(2)
            if self.agentPositionId%self.col != (self.col-1):
                self.agentPosition[self.agentPositionId]=0
                self.agentPositionId+=1
                self.agentPosition[self.agentPositionId]=1
                self.timeStemp+=1
                reward -=5
            else:
                self.timeStemp+=1
                reward -=10
        elif action=="L" :
            self.trajectory[self.agentPositionId]=1
            self.trajectoryL[self.agentPositionId].append([1,self.timeStemp])
            self.timeList[self.agentPositionId]=self.timeStemp
            self.trajectoryR.append(1)
            if self.agentPositionId%self.col != 0:
                self.agentPosition[self.agentPositionId]=0
                self.agentPositionId-=1
                self.agentPosition[self.agentPositionId]=1
                self.timeStemp+=1
                reward -=5
            else:
                self.timeStemp+=1
                reward -=10
        elif action=="U":
            self.trajectory[self.agentPositionId]=3
            self.trajectoryL[self.agentPositionId].append([3,self.timeStemp])
            self.timeList[self.agentPositionId]=self.timeStemp
            self.trajectoryR.append(3)
            if self.agentPositionId//self.col != (self.row-1):
                self.agentPosition[self.agentPositionId]=0
                self.agentPositionId+=self.col
                self.agentPosition[self.agentPositionId]=1
                self.timeStemp+=1
                reward -=5
            else:
                self.timeStemp+=1
                reward -=10
        elif action=="D":
            self.trajectory[self.agentPositionId]=4
            self.trajectoryL[self.agentPositionId].append([4,self.timeStemp])
            self.timeList[self.agentPositionId]=self.timeStemp
            self.trajectoryR.append(4)
            if self.agentPositionId//self.col != 0:
                self.agentPosition[self.agentPositionId]=0
                self.agentPositionId-=self.col
                self.agentPosition[self.agentPositionId]=1
                self.timeStemp+=1
                reward -=5
            else:
                self.timeStemp+=1
                reward -=10
        elif action=="G":
            self.trajectory[self.agentPositionId]=5
            self.trajectoryL[self.agentPositionId].append([5,self.timeStemp])
            self.timeList[self.agentPositionId]=self.timeStemp
            self.trajectoryR.append(5)
            if self.digTime[self.agentPositionId] == 0:
                self.timeStemp+=1
                reward -=10
            else:
                self.timeStemp+=self.digTime[self.agentPositionId]
                reward -=self.digTime[self.agentPositionId]
                self.digTime[self.agentPositionId]=0
                if self.agentPositionId in self.treasureList:
                    self.treasureFound+=(self.treasureList==self.agentPositionId).sum()
                    reward += (self.treasureList==self.agentPositionId).sum()*20
                    self.history[self.agentPositionId]=(self.treasureList==self.agentPositionId).sum()
                else:
                    self.history[self.agentPositionId] = 0
                self.groupMap[self.agentPositionId//self.col][self.agentPositionId%self.col][1] = 1
                # self.probList[:,self.agentPositionId]=0
                # self.probList = np.array([self.probList[i]/sum(self.probList[i]) for i in range(len(self.probList))])
        else:
            self.timeStemp+=1
            reward -=10
        # if self.verbose:
        #     for i in range(self.row,0,-1):
        #         for j in range(self.col):
        #             if self.agentPosition[(i-1)*self.col+j] != 1:
        #                 print([self.prob[(i-1)*self.col+j],self.digTime[(i-1)*self.col+j],self.agentPosition[(i-1)*self.col+j]], end='')
        #             else:
        #                 print('***',[self.prob[(i-1)*self.col+j],self.digTime[(i-1)*self.col+j],self.agentPosition[(i-1)*self.col+j]],'***', end='')
        #         print("")
        #     print("Timestemp : ", self.timeStemp)
        if self.maxTimeStemp !=-1 and self.timeStemp >= self.maxTimeStemp:
            self.done=True
            self.timeStemp = self.maxTimeStemp
        if self.treasureFound==self.treasureNo:
            self.done=True
        if self.done==True:
            return self.getScore()
        else:
            return reward/100
            return 0

    def firstObserveGroup(self): 
        groupProbList=np.zeros((self.treasureNo,self.puzzleNo))
        for row in range(self.row):
            for col in range(self.col):
                for i in range(self.treasureNo):
                    groupProbList[i][self.groupMap[row][col][0]-1] += self.probList[i][row*self.col+col]
                    # if np.isnan(groupProbList[i][self.groupMap[row][col][0]-1]):
                    #     print("here1", self.probList[i][row*self.col+col])
        return groupProbList
    def updateObserveGroup(self):
        check = 0
        for i in range(len(self.groupInfo)):
            if (self.groupMap[self.groupInfo[i][0]:self.groupInfo[i][2],self.groupInfo[i][1]:self.groupInfo[i][3],1]==1).all():
                self.groupProbList[:,i] = 0.0
                check = 1
        if check==1:
            for i in range(len(self.groupProbList)):
                if sum(self.groupProbList[i]) != 0:
                    self.groupProbList[i] = self.groupProbList[i]/sum(self.groupProbList[i])
                    # if np.isnan(self.groupProbList[i]).any():
                    #     # print("here2", sum(self.groupProbList[i]))
            

            

    def getObservation(self):
        self.updateObserveGroup()
        digTemp=self.digTime/(self.treasure_high - 1)
        historyTemp = (self.history + 1) / (self.treasureNo + 1)
        # test = np.concatenate((self.groupProbList.reshape(-1), self.digTime, self.agentPosition,self.history))
        # print(test.shape)
        # print(self.groupProbList.reshape(-1).shape)
        # print(self.digTime.shape)
        # print(self.agentPosition.shape)
        # print(self.history.shape)
        # if np.isnan(test).any():
        #     print(test)
        return np.concatenate((self.groupProbList.reshape(-1), digTemp, self.agentPosition,historyTemp))
        # return [self.groupProbList.reshape(-1), self.digTime, self.agentPosition,self.history] ## [prob,digTime,agentPosition]
    
    def getScore(self):
        # print(-self.timeStemp)
        if self.treasureFound==self.treasureNo and self.maxTimeStemp != -1:
            return -self.timeStemp + self.maxTimeStemp
        elif self.treasureFound==self.treasureNo:
            if self.timeStemp > 1000:
                return -1
            else:
                return (500-self.timeStemp)/500
            return 1
            # return (-self.timeStemp +1000)/1000
        elif self.maxTimeStemp != -1:
            return (- self.timeStemp)/(self.maxTimeStemp)
        else:
            return (-self.timeStemp)/1000
    def getDone(self):
        return self.done

    def showGrid(self):
        # for i in range(self.row,0,-1):
        #     for j in range(self.col):
        #         if self.agentPosition[(i-1)*self.col+j] != 1:
        #             print([self.prob[(i-1)*self.col+j],self.digTime[(i-1)*self.col+j],self.agentPosition[(i-1)*self.col+j]], end='')
        #         else:
        #             print('***',[self.prob[(i-1)*self.col+j],self.digTime[(i-1)*self.col+j],self.agentPosition[(i-1)*self.col+j]],'***', end='')
        #     print("")
        # print("Timestemp : ", self.timeStemp)
        # print("Area information : ")
        print(self.groupMap)
    
